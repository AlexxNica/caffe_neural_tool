// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffetool.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "caffetool.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe_neural {

namespace {

const ::google::protobuf::Descriptor* ToolParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToolParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrainParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrainParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* InputParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* OutputParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutputParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PreprocessorParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PreprocessorParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepCropParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepCropParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepBlurParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepBlurParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepClaheParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepClaheParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepHistEqParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepHistEqParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_caffetool_2eproto() {
  protobuf_AddDesc_caffetool_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "caffetool.proto");
  GOOGLE_CHECK(file != NULL);
  ToolParam_descriptor_ = file->message_type(0);
  static const int ToolParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolParam, train_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolParam, process_),
  };
  ToolParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToolParam_descriptor_,
      ToolParam::default_instance_,
      ToolParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToolParam));
  TrainParam_descriptor_ = file->message_type(1);
  static const int TrainParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainParam, solver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainParam, solverstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainParam, input_),
  };
  TrainParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrainParam_descriptor_,
      TrainParam::default_instance_,
      TrainParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrainParam));
  ProcessParam_descriptor_ = file->message_type(2);
  static const int ProcessParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessParam, process_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessParam, caffemodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessParam, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessParam, output_),
  };
  ProcessParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessParam_descriptor_,
      ProcessParam::default_instance_,
      ProcessParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessParam));
  InputParam_descriptor_ = file->message_type(3);
  static const int InputParam_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParam, padding_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParam, patch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParam, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParam, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParam, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParam, preprocessor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParam, raw_images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParam, label_images_),
  };
  InputParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InputParam_descriptor_,
      InputParam::default_instance_,
      InputParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InputParam));
  OutputParam_descriptor_ = file->message_type(4);
  static const int OutputParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputParam, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputParam, fp32_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputParam, out_all_labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputParam, format_),
  };
  OutputParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OutputParam_descriptor_,
      OutputParam::default_instance_,
      OutputParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OutputParam));
  PreprocessorParam_descriptor_ = file->message_type(5);
  static const int PreprocessorParam_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessorParam, normalization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessorParam, crop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessorParam, clahe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessorParam, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessorParam, mirror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessorParam, histeq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessorParam, blur_),
  };
  PreprocessorParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PreprocessorParam_descriptor_,
      PreprocessorParam::default_instance_,
      PreprocessorParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessorParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessorParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PreprocessorParam));
  PrepCropParam_descriptor_ = file->message_type(6);
  static const int PrepCropParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepCropParam, imagecrop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepCropParam, labelcrop_),
  };
  PrepCropParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrepCropParam_descriptor_,
      PrepCropParam::default_instance_,
      PrepCropParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepCropParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepCropParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrepCropParam));
  PrepBlurParam_descriptor_ = file->message_type(7);
  static const int PrepBlurParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepBlurParam, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepBlurParam, std_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepBlurParam, ksize_),
  };
  PrepBlurParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrepBlurParam_descriptor_,
      PrepBlurParam::default_instance_,
      PrepBlurParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepBlurParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepBlurParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrepBlurParam));
  PrepClaheParam_descriptor_ = file->message_type(8);
  static const int PrepClaheParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepClaheParam, clip_),
  };
  PrepClaheParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrepClaheParam_descriptor_,
      PrepClaheParam::default_instance_,
      PrepClaheParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepClaheParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepClaheParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrepClaheParam));
  PrepHistEqParam_descriptor_ = file->message_type(9);
  static const int PrepHistEqParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepHistEqParam, patch_prior_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepHistEqParam, masking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepHistEqParam, label_boost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepHistEqParam, border_boost_),
  };
  PrepHistEqParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrepHistEqParam_descriptor_,
      PrepHistEqParam::default_instance_,
      PrepHistEqParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepHistEqParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepHistEqParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrepHistEqParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_caffetool_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToolParam_descriptor_, &ToolParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrainParam_descriptor_, &TrainParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessParam_descriptor_, &ProcessParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InputParam_descriptor_, &InputParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OutputParam_descriptor_, &OutputParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PreprocessorParam_descriptor_, &PreprocessorParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrepCropParam_descriptor_, &PrepCropParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrepBlurParam_descriptor_, &PrepBlurParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrepClaheParam_descriptor_, &PrepClaheParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrepHistEqParam_descriptor_, &PrepHistEqParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_caffetool_2eproto() {
  delete ToolParam::default_instance_;
  delete ToolParam_reflection_;
  delete TrainParam::default_instance_;
  delete TrainParam_reflection_;
  delete ProcessParam::default_instance_;
  delete ProcessParam_reflection_;
  delete InputParam::default_instance_;
  delete InputParam_reflection_;
  delete OutputParam::default_instance_;
  delete OutputParam_reflection_;
  delete OutputParam::_default_format_;
  delete PreprocessorParam::default_instance_;
  delete PreprocessorParam_reflection_;
  delete PrepCropParam::default_instance_;
  delete PrepCropParam_reflection_;
  delete PrepBlurParam::default_instance_;
  delete PrepBlurParam_reflection_;
  delete PrepClaheParam::default_instance_;
  delete PrepClaheParam_reflection_;
  delete PrepHistEqParam::default_instance_;
  delete PrepHistEqParam_reflection_;
}

void protobuf_AddDesc_caffetool_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017caffetool.proto\022\014caffe_neural\"a\n\tToolP"
    "aram\022\'\n\005train\030\001 \003(\0132\030.caffe_neural.Train"
    "Param\022+\n\007process\030\002 \003(\0132\032.caffe_neural.Pr"
    "ocessParam\"Z\n\nTrainParam\022\016\n\006solver\030\001 \001(\t"
    "\022\023\n\013solverstate\030\002 \001(\t\022\'\n\005input\030\003 \001(\0132\030.c"
    "affe_neural.InputParam\"\213\001\n\014ProcessParam\022"
    "\023\n\013process_net\030\001 \001(\t\022\022\n\ncaffemodel\030\002 \001(\t"
    "\022\'\n\005input\030\003 \001(\0132\030.caffe_neural.InputPara"
    "m\022)\n\006output\030\004 \001(\0132\031.caffe_neural.OutputP"
    "aram\"\315\001\n\nInputParam\022\024\n\014padding_size\030\001 \001("
    "\005\022\022\n\npatch_size\030\002 \001(\005\022\020\n\010channels\030\003 \001(\005\022"
    "\016\n\006labels\030\004 \001(\005\022\022\n\nbatch_size\030\005 \001(\005\0225\n\014p"
    "reprocessor\030\006 \001(\0132\037.caffe_neural.Preproc"
    "essorParam\022\022\n\nraw_images\030\007 \001(\t\022\024\n\014label_"
    "images\030\010 \001(\t\"j\n\013OutputParam\022\016\n\006output\030\001 "
    "\001(\t\022\027\n\010fp32_out\030\002 \001(\010:\005false\022\035\n\016out_all_"
    "labels\030\003 \001(\010:\005false\022\023\n\006format\030\004 \001(\t:\003tif"
    "\"\222\002\n\021PreprocessorParam\022\033\n\rnormalization\030"
    "\001 \001(\010:\004true\022)\n\004crop\030\002 \001(\0132\033.caffe_neural"
    ".PrepCropParam\022+\n\005clahe\030\003 \001(\0132\034.caffe_ne"
    "ural.PrepClaheParam\022\027\n\010rotation\030\004 \001(\010:\005f"
    "alse\022\025\n\006mirror\030\005 \001(\010:\005false\022-\n\006histeq\030\006 "
    "\001(\0132\035.caffe_neural.PrepHistEqParam\022)\n\004bl"
    "ur\030\007 \001(\0132\033.caffe_neural.PrepBlurParam\"5\n"
    "\rPrepCropParam\022\021\n\timagecrop\030\001 \001(\005\022\021\n\tlab"
    "elcrop\030\002 \001(\005\"D\n\rPrepBlurParam\022\017\n\004mean\030\001 "
    "\001(\002:\0010\022\020\n\003std\030\002 \001(\002:\0030.1\022\020\n\005ksize\030\003 \001(\005:"
    "\0015\"!\n\016PrepClaheParam\022\017\n\004clip\030\001 \001(\002:\0014\"r\n"
    "\017PrepHistEqParam\022\031\n\013patch_prior\030\001 \001(\010:\004t"
    "rue\022\026\n\007masking\030\002 \001(\010:\005false\022\023\n\013label_boo"
    "st\030\003 \003(\002\022\027\n\014border_boost\030\004 \001(\002:\0011", 1233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffetool.proto", &protobuf_RegisterTypes);
  ToolParam::default_instance_ = new ToolParam();
  TrainParam::default_instance_ = new TrainParam();
  ProcessParam::default_instance_ = new ProcessParam();
  InputParam::default_instance_ = new InputParam();
  OutputParam::_default_format_ =
      new ::std::string("tif", 3);
  OutputParam::default_instance_ = new OutputParam();
  PreprocessorParam::default_instance_ = new PreprocessorParam();
  PrepCropParam::default_instance_ = new PrepCropParam();
  PrepBlurParam::default_instance_ = new PrepBlurParam();
  PrepClaheParam::default_instance_ = new PrepClaheParam();
  PrepHistEqParam::default_instance_ = new PrepHistEqParam();
  ToolParam::default_instance_->InitAsDefaultInstance();
  TrainParam::default_instance_->InitAsDefaultInstance();
  ProcessParam::default_instance_->InitAsDefaultInstance();
  InputParam::default_instance_->InitAsDefaultInstance();
  OutputParam::default_instance_->InitAsDefaultInstance();
  PreprocessorParam::default_instance_->InitAsDefaultInstance();
  PrepCropParam::default_instance_->InitAsDefaultInstance();
  PrepBlurParam::default_instance_->InitAsDefaultInstance();
  PrepClaheParam::default_instance_->InitAsDefaultInstance();
  PrepHistEqParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_caffetool_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_caffetool_2eproto {
  StaticDescriptorInitializer_caffetool_2eproto() {
    protobuf_AddDesc_caffetool_2eproto();
  }
} static_descriptor_initializer_caffetool_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ToolParam::kTrainFieldNumber;
const int ToolParam::kProcessFieldNumber;
#endif  // !_MSC_VER

ToolParam::ToolParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToolParam::InitAsDefaultInstance() {
}

ToolParam::ToolParam(const ToolParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToolParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToolParam::~ToolParam() {
  SharedDtor();
}

void ToolParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToolParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToolParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToolParam_descriptor_;
}

const ToolParam& ToolParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffetool_2eproto();
  return *default_instance_;
}

ToolParam* ToolParam::default_instance_ = NULL;

ToolParam* ToolParam::New() const {
  return new ToolParam;
}

void ToolParam::Clear() {
  train_.Clear();
  process_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToolParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe_neural.TrainParam train = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_train:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_train()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_train;
        if (input->ExpectTag(18)) goto parse_process;
        break;
      }

      // repeated .caffe_neural.ProcessParam process = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_process()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_process;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToolParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .caffe_neural.TrainParam train = 1;
  for (int i = 0; i < this->train_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->train(i), output);
  }

  // repeated .caffe_neural.ProcessParam process = 2;
  for (int i = 0; i < this->process_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->process(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToolParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .caffe_neural.TrainParam train = 1;
  for (int i = 0; i < this->train_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->train(i), target);
  }

  // repeated .caffe_neural.ProcessParam process = 2;
  for (int i = 0; i < this->process_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->process(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToolParam::ByteSize() const {
  int total_size = 0;

  // repeated .caffe_neural.TrainParam train = 1;
  total_size += 1 * this->train_size();
  for (int i = 0; i < this->train_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->train(i));
  }

  // repeated .caffe_neural.ProcessParam process = 2;
  total_size += 1 * this->process_size();
  for (int i = 0; i < this->process_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->process(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToolParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToolParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToolParam::MergeFrom(const ToolParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  train_.MergeFrom(from.train_);
  process_.MergeFrom(from.process_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToolParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolParam::CopyFrom(const ToolParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolParam::IsInitialized() const {

  return true;
}

void ToolParam::Swap(ToolParam* other) {
  if (other != this) {
    train_.Swap(&other->train_);
    process_.Swap(&other->process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToolParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToolParam_descriptor_;
  metadata.reflection = ToolParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrainParam::kSolverFieldNumber;
const int TrainParam::kSolverstateFieldNumber;
const int TrainParam::kInputFieldNumber;
#endif  // !_MSC_VER

TrainParam::TrainParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrainParam::InitAsDefaultInstance() {
  input_ = const_cast< ::caffe_neural::InputParam*>(&::caffe_neural::InputParam::default_instance());
}

TrainParam::TrainParam(const TrainParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrainParam::SharedCtor() {
  _cached_size_ = 0;
  solver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  solverstate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  input_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrainParam::~TrainParam() {
  SharedDtor();
}

void TrainParam::SharedDtor() {
  if (solver_ != &::google::protobuf::internal::kEmptyString) {
    delete solver_;
  }
  if (solverstate_ != &::google::protobuf::internal::kEmptyString) {
    delete solverstate_;
  }
  if (this != default_instance_) {
    delete input_;
  }
}

void TrainParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrainParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrainParam_descriptor_;
}

const TrainParam& TrainParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffetool_2eproto();
  return *default_instance_;
}

TrainParam* TrainParam::default_instance_ = NULL;

TrainParam* TrainParam::New() const {
  return new TrainParam;
}

void TrainParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_solver()) {
      if (solver_ != &::google::protobuf::internal::kEmptyString) {
        solver_->clear();
      }
    }
    if (has_solverstate()) {
      if (solverstate_ != &::google::protobuf::internal::kEmptyString) {
        solverstate_->clear();
      }
    }
    if (has_input()) {
      if (input_ != NULL) input_->::caffe_neural::InputParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrainParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string solver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_solver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->solver().data(), this->solver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_solverstate;
        break;
      }

      // optional string solverstate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_solverstate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_solverstate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->solverstate().data(), this->solverstate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_input;
        break;
      }

      // optional .caffe_neural.InputParam input = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrainParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string solver = 1;
  if (has_solver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->solver().data(), this->solver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->solver(), output);
  }

  // optional string solverstate = 2;
  if (has_solverstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->solverstate().data(), this->solverstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->solverstate(), output);
  }

  // optional .caffe_neural.InputParam input = 3;
  if (has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->input(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrainParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string solver = 1;
  if (has_solver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->solver().data(), this->solver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->solver(), target);
  }

  // optional string solverstate = 2;
  if (has_solverstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->solverstate().data(), this->solverstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->solverstate(), target);
  }

  // optional .caffe_neural.InputParam input = 3;
  if (has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->input(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrainParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string solver = 1;
    if (has_solver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->solver());
    }

    // optional string solverstate = 2;
    if (has_solverstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->solverstate());
    }

    // optional .caffe_neural.InputParam input = 3;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrainParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrainParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrainParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrainParam::MergeFrom(const TrainParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_solver()) {
      set_solver(from.solver());
    }
    if (from.has_solverstate()) {
      set_solverstate(from.solverstate());
    }
    if (from.has_input()) {
      mutable_input()->::caffe_neural::InputParam::MergeFrom(from.input());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrainParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainParam::CopyFrom(const TrainParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainParam::IsInitialized() const {

  return true;
}

void TrainParam::Swap(TrainParam* other) {
  if (other != this) {
    std::swap(solver_, other->solver_);
    std::swap(solverstate_, other->solverstate_);
    std::swap(input_, other->input_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrainParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrainParam_descriptor_;
  metadata.reflection = TrainParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessParam::kProcessNetFieldNumber;
const int ProcessParam::kCaffemodelFieldNumber;
const int ProcessParam::kInputFieldNumber;
const int ProcessParam::kOutputFieldNumber;
#endif  // !_MSC_VER

ProcessParam::ProcessParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessParam::InitAsDefaultInstance() {
  input_ = const_cast< ::caffe_neural::InputParam*>(&::caffe_neural::InputParam::default_instance());
  output_ = const_cast< ::caffe_neural::OutputParam*>(&::caffe_neural::OutputParam::default_instance());
}

ProcessParam::ProcessParam(const ProcessParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessParam::SharedCtor() {
  _cached_size_ = 0;
  process_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  caffemodel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  input_ = NULL;
  output_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessParam::~ProcessParam() {
  SharedDtor();
}

void ProcessParam::SharedDtor() {
  if (process_net_ != &::google::protobuf::internal::kEmptyString) {
    delete process_net_;
  }
  if (caffemodel_ != &::google::protobuf::internal::kEmptyString) {
    delete caffemodel_;
  }
  if (this != default_instance_) {
    delete input_;
    delete output_;
  }
}

void ProcessParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessParam_descriptor_;
}

const ProcessParam& ProcessParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffetool_2eproto();
  return *default_instance_;
}

ProcessParam* ProcessParam::default_instance_ = NULL;

ProcessParam* ProcessParam::New() const {
  return new ProcessParam;
}

void ProcessParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_process_net()) {
      if (process_net_ != &::google::protobuf::internal::kEmptyString) {
        process_net_->clear();
      }
    }
    if (has_caffemodel()) {
      if (caffemodel_ != &::google::protobuf::internal::kEmptyString) {
        caffemodel_->clear();
      }
    }
    if (has_input()) {
      if (input_ != NULL) input_->::caffe_neural::InputParam::Clear();
    }
    if (has_output()) {
      if (output_ != NULL) output_->::caffe_neural::OutputParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string process_net = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process_net().data(), this->process_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_caffemodel;
        break;
      }

      // optional string caffemodel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caffemodel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caffemodel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->caffemodel().data(), this->caffemodel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_input;
        break;
      }

      // optional .caffe_neural.InputParam input = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_output;
        break;
      }

      // optional .caffe_neural.OutputParam output = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string process_net = 1;
  if (has_process_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_net().data(), this->process_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->process_net(), output);
  }

  // optional string caffemodel = 2;
  if (has_caffemodel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caffemodel().data(), this->caffemodel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->caffemodel(), output);
  }

  // optional .caffe_neural.InputParam input = 3;
  if (has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->input(), output);
  }

  // optional .caffe_neural.OutputParam output = 4;
  if (has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->output(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string process_net = 1;
  if (has_process_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_net().data(), this->process_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->process_net(), target);
  }

  // optional string caffemodel = 2;
  if (has_caffemodel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caffemodel().data(), this->caffemodel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->caffemodel(), target);
  }

  // optional .caffe_neural.InputParam input = 3;
  if (has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->input(), target);
  }

  // optional .caffe_neural.OutputParam output = 4;
  if (has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->output(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string process_net = 1;
    if (has_process_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_net());
    }

    // optional string caffemodel = 2;
    if (has_caffemodel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caffemodel());
    }

    // optional .caffe_neural.InputParam input = 3;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input());
    }

    // optional .caffe_neural.OutputParam output = 4;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->output());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessParam::MergeFrom(const ProcessParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_process_net()) {
      set_process_net(from.process_net());
    }
    if (from.has_caffemodel()) {
      set_caffemodel(from.caffemodel());
    }
    if (from.has_input()) {
      mutable_input()->::caffe_neural::InputParam::MergeFrom(from.input());
    }
    if (from.has_output()) {
      mutable_output()->::caffe_neural::OutputParam::MergeFrom(from.output());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessParam::CopyFrom(const ProcessParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessParam::IsInitialized() const {

  return true;
}

void ProcessParam::Swap(ProcessParam* other) {
  if (other != this) {
    std::swap(process_net_, other->process_net_);
    std::swap(caffemodel_, other->caffemodel_);
    std::swap(input_, other->input_);
    std::swap(output_, other->output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessParam_descriptor_;
  metadata.reflection = ProcessParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InputParam::kPaddingSizeFieldNumber;
const int InputParam::kPatchSizeFieldNumber;
const int InputParam::kChannelsFieldNumber;
const int InputParam::kLabelsFieldNumber;
const int InputParam::kBatchSizeFieldNumber;
const int InputParam::kPreprocessorFieldNumber;
const int InputParam::kRawImagesFieldNumber;
const int InputParam::kLabelImagesFieldNumber;
#endif  // !_MSC_VER

InputParam::InputParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InputParam::InitAsDefaultInstance() {
  preprocessor_ = const_cast< ::caffe_neural::PreprocessorParam*>(&::caffe_neural::PreprocessorParam::default_instance());
}

InputParam::InputParam(const InputParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InputParam::SharedCtor() {
  _cached_size_ = 0;
  padding_size_ = 0;
  patch_size_ = 0;
  channels_ = 0;
  labels_ = 0;
  batch_size_ = 0;
  preprocessor_ = NULL;
  raw_images_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  label_images_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InputParam::~InputParam() {
  SharedDtor();
}

void InputParam::SharedDtor() {
  if (raw_images_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_images_;
  }
  if (label_images_ != &::google::protobuf::internal::kEmptyString) {
    delete label_images_;
  }
  if (this != default_instance_) {
    delete preprocessor_;
  }
}

void InputParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputParam_descriptor_;
}

const InputParam& InputParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffetool_2eproto();
  return *default_instance_;
}

InputParam* InputParam::default_instance_ = NULL;

InputParam* InputParam::New() const {
  return new InputParam;
}

void InputParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    padding_size_ = 0;
    patch_size_ = 0;
    channels_ = 0;
    labels_ = 0;
    batch_size_ = 0;
    if (has_preprocessor()) {
      if (preprocessor_ != NULL) preprocessor_->::caffe_neural::PreprocessorParam::Clear();
    }
    if (has_raw_images()) {
      if (raw_images_ != &::google::protobuf::internal::kEmptyString) {
        raw_images_->clear();
      }
    }
    if (has_label_images()) {
      if (label_images_ != &::google::protobuf::internal::kEmptyString) {
        label_images_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InputParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 padding_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &padding_size_)));
          set_has_padding_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_patch_size;
        break;
      }

      // optional int32 patch_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patch_size_)));
          set_has_patch_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channels;
        break;
      }

      // optional int32 channels = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_labels;
        break;
      }

      // optional int32 labels = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_labels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &labels_)));
          set_has_labels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_batch_size;
        break;
      }

      // optional int32 batch_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_preprocessor;
        break;
      }

      // optional .caffe_neural.PreprocessorParam preprocessor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preprocessor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preprocessor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_raw_images;
        break;
      }

      // optional string raw_images = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_images()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_images().data(), this->raw_images().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_label_images;
        break;
      }

      // optional string label_images = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label_images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label_images()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label_images().data(), this->label_images().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InputParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 padding_size = 1;
  if (has_padding_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->padding_size(), output);
  }

  // optional int32 patch_size = 2;
  if (has_patch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->patch_size(), output);
  }

  // optional int32 channels = 3;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channels(), output);
  }

  // optional int32 labels = 4;
  if (has_labels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->labels(), output);
  }

  // optional int32 batch_size = 5;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->batch_size(), output);
  }

  // optional .caffe_neural.PreprocessorParam preprocessor = 6;
  if (has_preprocessor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->preprocessor(), output);
  }

  // optional string raw_images = 7;
  if (has_raw_images()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_images().data(), this->raw_images().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->raw_images(), output);
  }

  // optional string label_images = 8;
  if (has_label_images()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label_images().data(), this->label_images().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->label_images(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InputParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 padding_size = 1;
  if (has_padding_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->padding_size(), target);
  }

  // optional int32 patch_size = 2;
  if (has_patch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->patch_size(), target);
  }

  // optional int32 channels = 3;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channels(), target);
  }

  // optional int32 labels = 4;
  if (has_labels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->labels(), target);
  }

  // optional int32 batch_size = 5;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->batch_size(), target);
  }

  // optional .caffe_neural.PreprocessorParam preprocessor = 6;
  if (has_preprocessor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->preprocessor(), target);
  }

  // optional string raw_images = 7;
  if (has_raw_images()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_images().data(), this->raw_images().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->raw_images(), target);
  }

  // optional string label_images = 8;
  if (has_label_images()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label_images().data(), this->label_images().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->label_images(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InputParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 padding_size = 1;
    if (has_padding_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->padding_size());
    }

    // optional int32 patch_size = 2;
    if (has_patch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patch_size());
    }

    // optional int32 channels = 3;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

    // optional int32 labels = 4;
    if (has_labels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->labels());
    }

    // optional int32 batch_size = 5;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch_size());
    }

    // optional .caffe_neural.PreprocessorParam preprocessor = 6;
    if (has_preprocessor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->preprocessor());
    }

    // optional string raw_images = 7;
    if (has_raw_images()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_images());
    }

    // optional string label_images = 8;
    if (has_label_images()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label_images());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InputParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InputParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InputParam::MergeFrom(const InputParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_padding_size()) {
      set_padding_size(from.padding_size());
    }
    if (from.has_patch_size()) {
      set_patch_size(from.patch_size());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_labels()) {
      set_labels(from.labels());
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_preprocessor()) {
      mutable_preprocessor()->::caffe_neural::PreprocessorParam::MergeFrom(from.preprocessor());
    }
    if (from.has_raw_images()) {
      set_raw_images(from.raw_images());
    }
    if (from.has_label_images()) {
      set_label_images(from.label_images());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InputParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputParam::CopyFrom(const InputParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputParam::IsInitialized() const {

  return true;
}

void InputParam::Swap(InputParam* other) {
  if (other != this) {
    std::swap(padding_size_, other->padding_size_);
    std::swap(patch_size_, other->patch_size_);
    std::swap(channels_, other->channels_);
    std::swap(labels_, other->labels_);
    std::swap(batch_size_, other->batch_size_);
    std::swap(preprocessor_, other->preprocessor_);
    std::swap(raw_images_, other->raw_images_);
    std::swap(label_images_, other->label_images_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InputParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputParam_descriptor_;
  metadata.reflection = InputParam_reflection_;
  return metadata;
}


// ===================================================================

::std::string* OutputParam::_default_format_ = NULL;
#ifndef _MSC_VER
const int OutputParam::kOutputFieldNumber;
const int OutputParam::kFp32OutFieldNumber;
const int OutputParam::kOutAllLabelsFieldNumber;
const int OutputParam::kFormatFieldNumber;
#endif  // !_MSC_VER

OutputParam::OutputParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OutputParam::InitAsDefaultInstance() {
}

OutputParam::OutputParam(const OutputParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OutputParam::SharedCtor() {
  _cached_size_ = 0;
  output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fp32_out_ = false;
  out_all_labels_ = false;
  format_ = const_cast< ::std::string*>(_default_format_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutputParam::~OutputParam() {
  SharedDtor();
}

void OutputParam::SharedDtor() {
  if (output_ != &::google::protobuf::internal::kEmptyString) {
    delete output_;
  }
  if (format_ != _default_format_) {
    delete format_;
  }
  if (this != default_instance_) {
  }
}

void OutputParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutputParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutputParam_descriptor_;
}

const OutputParam& OutputParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffetool_2eproto();
  return *default_instance_;
}

OutputParam* OutputParam::default_instance_ = NULL;

OutputParam* OutputParam::New() const {
  return new OutputParam;
}

void OutputParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_output()) {
      if (output_ != &::google::protobuf::internal::kEmptyString) {
        output_->clear();
      }
    }
    fp32_out_ = false;
    out_all_labels_ = false;
    if (has_format()) {
      if (format_ != _default_format_) {
        format_->assign(*_default_format_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OutputParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string output = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->output().data(), this->output().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fp32_out;
        break;
      }

      // optional bool fp32_out = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fp32_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fp32_out_)));
          set_has_fp32_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_out_all_labels;
        break;
      }

      // optional bool out_all_labels = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_all_labels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &out_all_labels_)));
          set_has_out_all_labels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_format;
        break;
      }

      // optional string format = 4 [default = "tif"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OutputParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string output = 1;
  if (has_output()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output().data(), this->output().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->output(), output);
  }

  // optional bool fp32_out = 2 [default = false];
  if (has_fp32_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->fp32_out(), output);
  }

  // optional bool out_all_labels = 3 [default = false];
  if (has_out_all_labels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->out_all_labels(), output);
  }

  // optional string format = 4 [default = "tif"];
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->format(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OutputParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string output = 1;
  if (has_output()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output().data(), this->output().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->output(), target);
  }

  // optional bool fp32_out = 2 [default = false];
  if (has_fp32_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->fp32_out(), target);
  }

  // optional bool out_all_labels = 3 [default = false];
  if (has_out_all_labels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->out_all_labels(), target);
  }

  // optional string format = 4 [default = "tif"];
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->format(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OutputParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string output = 1;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output());
    }

    // optional bool fp32_out = 2 [default = false];
    if (has_fp32_out()) {
      total_size += 1 + 1;
    }

    // optional bool out_all_labels = 3 [default = false];
    if (has_out_all_labels()) {
      total_size += 1 + 1;
    }

    // optional string format = 4 [default = "tif"];
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutputParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OutputParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OutputParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutputParam::MergeFrom(const OutputParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_output()) {
      set_output(from.output());
    }
    if (from.has_fp32_out()) {
      set_fp32_out(from.fp32_out());
    }
    if (from.has_out_all_labels()) {
      set_out_all_labels(from.out_all_labels());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OutputParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputParam::CopyFrom(const OutputParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputParam::IsInitialized() const {

  return true;
}

void OutputParam::Swap(OutputParam* other) {
  if (other != this) {
    std::swap(output_, other->output_);
    std::swap(fp32_out_, other->fp32_out_);
    std::swap(out_all_labels_, other->out_all_labels_);
    std::swap(format_, other->format_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OutputParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutputParam_descriptor_;
  metadata.reflection = OutputParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PreprocessorParam::kNormalizationFieldNumber;
const int PreprocessorParam::kCropFieldNumber;
const int PreprocessorParam::kClaheFieldNumber;
const int PreprocessorParam::kRotationFieldNumber;
const int PreprocessorParam::kMirrorFieldNumber;
const int PreprocessorParam::kHisteqFieldNumber;
const int PreprocessorParam::kBlurFieldNumber;
#endif  // !_MSC_VER

PreprocessorParam::PreprocessorParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PreprocessorParam::InitAsDefaultInstance() {
  crop_ = const_cast< ::caffe_neural::PrepCropParam*>(&::caffe_neural::PrepCropParam::default_instance());
  clahe_ = const_cast< ::caffe_neural::PrepClaheParam*>(&::caffe_neural::PrepClaheParam::default_instance());
  histeq_ = const_cast< ::caffe_neural::PrepHistEqParam*>(&::caffe_neural::PrepHistEqParam::default_instance());
  blur_ = const_cast< ::caffe_neural::PrepBlurParam*>(&::caffe_neural::PrepBlurParam::default_instance());
}

PreprocessorParam::PreprocessorParam(const PreprocessorParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PreprocessorParam::SharedCtor() {
  _cached_size_ = 0;
  normalization_ = true;
  crop_ = NULL;
  clahe_ = NULL;
  rotation_ = false;
  mirror_ = false;
  histeq_ = NULL;
  blur_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreprocessorParam::~PreprocessorParam() {
  SharedDtor();
}

void PreprocessorParam::SharedDtor() {
  if (this != default_instance_) {
    delete crop_;
    delete clahe_;
    delete histeq_;
    delete blur_;
  }
}

void PreprocessorParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreprocessorParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreprocessorParam_descriptor_;
}

const PreprocessorParam& PreprocessorParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffetool_2eproto();
  return *default_instance_;
}

PreprocessorParam* PreprocessorParam::default_instance_ = NULL;

PreprocessorParam* PreprocessorParam::New() const {
  return new PreprocessorParam;
}

void PreprocessorParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    normalization_ = true;
    if (has_crop()) {
      if (crop_ != NULL) crop_->::caffe_neural::PrepCropParam::Clear();
    }
    if (has_clahe()) {
      if (clahe_ != NULL) clahe_->::caffe_neural::PrepClaheParam::Clear();
    }
    rotation_ = false;
    mirror_ = false;
    if (has_histeq()) {
      if (histeq_ != NULL) histeq_->::caffe_neural::PrepHistEqParam::Clear();
    }
    if (has_blur()) {
      if (blur_ != NULL) blur_->::caffe_neural::PrepBlurParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PreprocessorParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool normalization = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalization_)));
          set_has_normalization();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_crop;
        break;
      }

      // optional .caffe_neural.PrepCropParam crop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clahe;
        break;
      }

      // optional .caffe_neural.PrepClaheParam clahe = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clahe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clahe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rotation;
        break;
      }

      // optional bool rotation = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mirror;
        break;
      }

      // optional bool mirror = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mirror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mirror_)));
          set_has_mirror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_histeq;
        break;
      }

      // optional .caffe_neural.PrepHistEqParam histeq = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_histeq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_histeq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_blur;
        break;
      }

      // optional .caffe_neural.PrepBlurParam blur = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blur()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PreprocessorParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool normalization = 1 [default = true];
  if (has_normalization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->normalization(), output);
  }

  // optional .caffe_neural.PrepCropParam crop = 2;
  if (has_crop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->crop(), output);
  }

  // optional .caffe_neural.PrepClaheParam clahe = 3;
  if (has_clahe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->clahe(), output);
  }

  // optional bool rotation = 4 [default = false];
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->rotation(), output);
  }

  // optional bool mirror = 5 [default = false];
  if (has_mirror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->mirror(), output);
  }

  // optional .caffe_neural.PrepHistEqParam histeq = 6;
  if (has_histeq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->histeq(), output);
  }

  // optional .caffe_neural.PrepBlurParam blur = 7;
  if (has_blur()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->blur(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PreprocessorParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool normalization = 1 [default = true];
  if (has_normalization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->normalization(), target);
  }

  // optional .caffe_neural.PrepCropParam crop = 2;
  if (has_crop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->crop(), target);
  }

  // optional .caffe_neural.PrepClaheParam clahe = 3;
  if (has_clahe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->clahe(), target);
  }

  // optional bool rotation = 4 [default = false];
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->rotation(), target);
  }

  // optional bool mirror = 5 [default = false];
  if (has_mirror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->mirror(), target);
  }

  // optional .caffe_neural.PrepHistEqParam histeq = 6;
  if (has_histeq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->histeq(), target);
  }

  // optional .caffe_neural.PrepBlurParam blur = 7;
  if (has_blur()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->blur(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PreprocessorParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool normalization = 1 [default = true];
    if (has_normalization()) {
      total_size += 1 + 1;
    }

    // optional .caffe_neural.PrepCropParam crop = 2;
    if (has_crop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crop());
    }

    // optional .caffe_neural.PrepClaheParam clahe = 3;
    if (has_clahe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clahe());
    }

    // optional bool rotation = 4 [default = false];
    if (has_rotation()) {
      total_size += 1 + 1;
    }

    // optional bool mirror = 5 [default = false];
    if (has_mirror()) {
      total_size += 1 + 1;
    }

    // optional .caffe_neural.PrepHistEqParam histeq = 6;
    if (has_histeq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->histeq());
    }

    // optional .caffe_neural.PrepBlurParam blur = 7;
    if (has_blur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blur());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreprocessorParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PreprocessorParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PreprocessorParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PreprocessorParam::MergeFrom(const PreprocessorParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_normalization()) {
      set_normalization(from.normalization());
    }
    if (from.has_crop()) {
      mutable_crop()->::caffe_neural::PrepCropParam::MergeFrom(from.crop());
    }
    if (from.has_clahe()) {
      mutable_clahe()->::caffe_neural::PrepClaheParam::MergeFrom(from.clahe());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
    if (from.has_mirror()) {
      set_mirror(from.mirror());
    }
    if (from.has_histeq()) {
      mutable_histeq()->::caffe_neural::PrepHistEqParam::MergeFrom(from.histeq());
    }
    if (from.has_blur()) {
      mutable_blur()->::caffe_neural::PrepBlurParam::MergeFrom(from.blur());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PreprocessorParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreprocessorParam::CopyFrom(const PreprocessorParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreprocessorParam::IsInitialized() const {

  return true;
}

void PreprocessorParam::Swap(PreprocessorParam* other) {
  if (other != this) {
    std::swap(normalization_, other->normalization_);
    std::swap(crop_, other->crop_);
    std::swap(clahe_, other->clahe_);
    std::swap(rotation_, other->rotation_);
    std::swap(mirror_, other->mirror_);
    std::swap(histeq_, other->histeq_);
    std::swap(blur_, other->blur_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PreprocessorParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PreprocessorParam_descriptor_;
  metadata.reflection = PreprocessorParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrepCropParam::kImagecropFieldNumber;
const int PrepCropParam::kLabelcropFieldNumber;
#endif  // !_MSC_VER

PrepCropParam::PrepCropParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrepCropParam::InitAsDefaultInstance() {
}

PrepCropParam::PrepCropParam(const PrepCropParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrepCropParam::SharedCtor() {
  _cached_size_ = 0;
  imagecrop_ = 0;
  labelcrop_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepCropParam::~PrepCropParam() {
  SharedDtor();
}

void PrepCropParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrepCropParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepCropParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepCropParam_descriptor_;
}

const PrepCropParam& PrepCropParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffetool_2eproto();
  return *default_instance_;
}

PrepCropParam* PrepCropParam::default_instance_ = NULL;

PrepCropParam* PrepCropParam::New() const {
  return new PrepCropParam;
}

void PrepCropParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    imagecrop_ = 0;
    labelcrop_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrepCropParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 imagecrop = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imagecrop_)));
          set_has_imagecrop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_labelcrop;
        break;
      }

      // optional int32 labelcrop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_labelcrop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &labelcrop_)));
          set_has_labelcrop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrepCropParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 imagecrop = 1;
  if (has_imagecrop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->imagecrop(), output);
  }

  // optional int32 labelcrop = 2;
  if (has_labelcrop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->labelcrop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrepCropParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 imagecrop = 1;
  if (has_imagecrop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->imagecrop(), target);
  }

  // optional int32 labelcrop = 2;
  if (has_labelcrop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->labelcrop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrepCropParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 imagecrop = 1;
    if (has_imagecrop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imagecrop());
    }

    // optional int32 labelcrop = 2;
    if (has_labelcrop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->labelcrop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepCropParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrepCropParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepCropParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepCropParam::MergeFrom(const PrepCropParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imagecrop()) {
      set_imagecrop(from.imagecrop());
    }
    if (from.has_labelcrop()) {
      set_labelcrop(from.labelcrop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrepCropParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepCropParam::CopyFrom(const PrepCropParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepCropParam::IsInitialized() const {

  return true;
}

void PrepCropParam::Swap(PrepCropParam* other) {
  if (other != this) {
    std::swap(imagecrop_, other->imagecrop_);
    std::swap(labelcrop_, other->labelcrop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrepCropParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepCropParam_descriptor_;
  metadata.reflection = PrepCropParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrepBlurParam::kMeanFieldNumber;
const int PrepBlurParam::kStdFieldNumber;
const int PrepBlurParam::kKsizeFieldNumber;
#endif  // !_MSC_VER

PrepBlurParam::PrepBlurParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrepBlurParam::InitAsDefaultInstance() {
}

PrepBlurParam::PrepBlurParam(const PrepBlurParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrepBlurParam::SharedCtor() {
  _cached_size_ = 0;
  mean_ = 0;
  std_ = 0.1f;
  ksize_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepBlurParam::~PrepBlurParam() {
  SharedDtor();
}

void PrepBlurParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrepBlurParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepBlurParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepBlurParam_descriptor_;
}

const PrepBlurParam& PrepBlurParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffetool_2eproto();
  return *default_instance_;
}

PrepBlurParam* PrepBlurParam::default_instance_ = NULL;

PrepBlurParam* PrepBlurParam::New() const {
  return new PrepBlurParam;
}

void PrepBlurParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mean_ = 0;
    std_ = 0.1f;
    ksize_ = 5;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrepBlurParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float mean = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_std;
        break;
      }

      // optional float std = 2 [default = 0.1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_std:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_)));
          set_has_std();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ksize;
        break;
      }

      // optional int32 ksize = 3 [default = 5];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ksize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ksize_)));
          set_has_ksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrepBlurParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float mean = 1 [default = 0];
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->mean(), output);
  }

  // optional float std = 2 [default = 0.1];
  if (has_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->std(), output);
  }

  // optional int32 ksize = 3 [default = 5];
  if (has_ksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ksize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrepBlurParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float mean = 1 [default = 0];
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->mean(), target);
  }

  // optional float std = 2 [default = 0.1];
  if (has_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->std(), target);
  }

  // optional int32 ksize = 3 [default = 5];
  if (has_ksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ksize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrepBlurParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float mean = 1 [default = 0];
    if (has_mean()) {
      total_size += 1 + 4;
    }

    // optional float std = 2 [default = 0.1];
    if (has_std()) {
      total_size += 1 + 4;
    }

    // optional int32 ksize = 3 [default = 5];
    if (has_ksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ksize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepBlurParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrepBlurParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepBlurParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepBlurParam::MergeFrom(const PrepBlurParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_std()) {
      set_std(from.std());
    }
    if (from.has_ksize()) {
      set_ksize(from.ksize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrepBlurParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepBlurParam::CopyFrom(const PrepBlurParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepBlurParam::IsInitialized() const {

  return true;
}

void PrepBlurParam::Swap(PrepBlurParam* other) {
  if (other != this) {
    std::swap(mean_, other->mean_);
    std::swap(std_, other->std_);
    std::swap(ksize_, other->ksize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrepBlurParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepBlurParam_descriptor_;
  metadata.reflection = PrepBlurParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrepClaheParam::kClipFieldNumber;
#endif  // !_MSC_VER

PrepClaheParam::PrepClaheParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrepClaheParam::InitAsDefaultInstance() {
}

PrepClaheParam::PrepClaheParam(const PrepClaheParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrepClaheParam::SharedCtor() {
  _cached_size_ = 0;
  clip_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepClaheParam::~PrepClaheParam() {
  SharedDtor();
}

void PrepClaheParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrepClaheParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepClaheParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepClaheParam_descriptor_;
}

const PrepClaheParam& PrepClaheParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffetool_2eproto();
  return *default_instance_;
}

PrepClaheParam* PrepClaheParam::default_instance_ = NULL;

PrepClaheParam* PrepClaheParam::New() const {
  return new PrepClaheParam;
}

void PrepClaheParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clip_ = 4;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrepClaheParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float clip = 1 [default = 4];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clip_)));
          set_has_clip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrepClaheParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float clip = 1 [default = 4];
  if (has_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->clip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrepClaheParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float clip = 1 [default = 4];
  if (has_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->clip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrepClaheParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float clip = 1 [default = 4];
    if (has_clip()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepClaheParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrepClaheParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepClaheParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepClaheParam::MergeFrom(const PrepClaheParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clip()) {
      set_clip(from.clip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrepClaheParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepClaheParam::CopyFrom(const PrepClaheParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepClaheParam::IsInitialized() const {

  return true;
}

void PrepClaheParam::Swap(PrepClaheParam* other) {
  if (other != this) {
    std::swap(clip_, other->clip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrepClaheParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepClaheParam_descriptor_;
  metadata.reflection = PrepClaheParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrepHistEqParam::kPatchPriorFieldNumber;
const int PrepHistEqParam::kMaskingFieldNumber;
const int PrepHistEqParam::kLabelBoostFieldNumber;
const int PrepHistEqParam::kBorderBoostFieldNumber;
#endif  // !_MSC_VER

PrepHistEqParam::PrepHistEqParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrepHistEqParam::InitAsDefaultInstance() {
}

PrepHistEqParam::PrepHistEqParam(const PrepHistEqParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrepHistEqParam::SharedCtor() {
  _cached_size_ = 0;
  patch_prior_ = true;
  masking_ = false;
  border_boost_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepHistEqParam::~PrepHistEqParam() {
  SharedDtor();
}

void PrepHistEqParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrepHistEqParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepHistEqParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepHistEqParam_descriptor_;
}

const PrepHistEqParam& PrepHistEqParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffetool_2eproto();
  return *default_instance_;
}

PrepHistEqParam* PrepHistEqParam::default_instance_ = NULL;

PrepHistEqParam* PrepHistEqParam::New() const {
  return new PrepHistEqParam;
}

void PrepHistEqParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    patch_prior_ = true;
    masking_ = false;
    border_boost_ = 1;
  }
  label_boost_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrepHistEqParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool patch_prior = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &patch_prior_)));
          set_has_patch_prior();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_masking;
        break;
      }

      // optional bool masking = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_masking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &masking_)));
          set_has_masking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_label_boost;
        break;
      }

      // repeated float label_boost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_label_boost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_label_boost())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_label_boost())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_label_boost;
        if (input->ExpectTag(37)) goto parse_border_boost;
        break;
      }

      // optional float border_boost = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_border_boost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &border_boost_)));
          set_has_border_boost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrepHistEqParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool patch_prior = 1 [default = true];
  if (has_patch_prior()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->patch_prior(), output);
  }

  // optional bool masking = 2 [default = false];
  if (has_masking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->masking(), output);
  }

  // repeated float label_boost = 3;
  for (int i = 0; i < this->label_boost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->label_boost(i), output);
  }

  // optional float border_boost = 4 [default = 1];
  if (has_border_boost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->border_boost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrepHistEqParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool patch_prior = 1 [default = true];
  if (has_patch_prior()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->patch_prior(), target);
  }

  // optional bool masking = 2 [default = false];
  if (has_masking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->masking(), target);
  }

  // repeated float label_boost = 3;
  for (int i = 0; i < this->label_boost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->label_boost(i), target);
  }

  // optional float border_boost = 4 [default = 1];
  if (has_border_boost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->border_boost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrepHistEqParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool patch_prior = 1 [default = true];
    if (has_patch_prior()) {
      total_size += 1 + 1;
    }

    // optional bool masking = 2 [default = false];
    if (has_masking()) {
      total_size += 1 + 1;
    }

    // optional float border_boost = 4 [default = 1];
    if (has_border_boost()) {
      total_size += 1 + 4;
    }

  }
  // repeated float label_boost = 3;
  {
    int data_size = 0;
    data_size = 4 * this->label_boost_size();
    total_size += 1 * this->label_boost_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepHistEqParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrepHistEqParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepHistEqParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepHistEqParam::MergeFrom(const PrepHistEqParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  label_boost_.MergeFrom(from.label_boost_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_patch_prior()) {
      set_patch_prior(from.patch_prior());
    }
    if (from.has_masking()) {
      set_masking(from.masking());
    }
    if (from.has_border_boost()) {
      set_border_boost(from.border_boost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrepHistEqParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepHistEqParam::CopyFrom(const PrepHistEqParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepHistEqParam::IsInitialized() const {

  return true;
}

void PrepHistEqParam::Swap(PrepHistEqParam* other) {
  if (other != this) {
    std::swap(patch_prior_, other->patch_prior_);
    std::swap(masking_, other->masking_);
    label_boost_.Swap(&other->label_boost_);
    std::swap(border_boost_, other->border_boost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrepHistEqParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepHistEqParam_descriptor_;
  metadata.reflection = PrepHistEqParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe_neural

// @@protoc_insertion_point(global_scope)
